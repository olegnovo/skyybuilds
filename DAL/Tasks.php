<?php
/*
Author:			This code was generated by DALGen version 1.0.0.0 available at https://github.com/H0r53/DALGen
Date:			11/12/2017
Description:	Creates the DAL class for  Tasks table and respective stored procedures

*/



class Tasks {

	// This is for local purposes only! In hosted environments the db_settings.php file should be outside of the webroot, such as: include("/outside-webroot/db_settings.php");
	protected static function getDbSettings() { return "DAL/db_localsettings.php"; }

	/******************************************************************/
	// Properties
	/******************************************************************/

	protected $TaskID;
	protected $TaskName;
	protected $TaskDescription;
	protected $ProjectID;
	protected $StatusTypeID;
	protected $StartDate;
	protected $EndDate;
	protected $UserID;


	/******************************************************************/
	// Constructors
	/******************************************************************/
	public function __construct() {
		$argv = func_get_args();
		switch( func_num_args() ) {
			case 0:
				self::__constructBase();
				break;
			case 1:
				self::__constructPK( $argv[0] );
				break;
			case 8:
				self::__constructFull( $argv[0], $argv[1], $argv[2], $argv[3], $argv[4], $argv[5], $argv[6], $argv[7] );
		}
	}


	public function __constructBase() {
		$this->TaskID = 0;
		$this->TaskName = "";
		$this->TaskDescription = "";
		$this->ProjectID = 0;
		$this->StatusTypeID = 0;
		$this->StartDate = "";
		$this->EndDate = "";
		$this->UserID = 0;
	}


	public function __constructPK($paramId) {
		$this->load($paramId);
	}


	public function __constructFull($paramTaskID,$paramTaskName,$paramTaskDescription,$paramProjectID,$paramStatusTypeID,$paramStartDate,$paramEndDate,$paramUserID) {
		$this->TaskID = $paramTaskID;
		$this->TaskName = $paramTaskName;
		$this->TaskDescription = $paramTaskDescription;
		$this->ProjectID = $paramProjectID;
		$this->StatusTypeID = $paramStatusTypeID;
		$this->StartDate = $paramStartDate;
		$this->EndDate = $paramEndDate;
		$this->UserID = $paramUserID;
	}


	/******************************************************************/
	// Accessors / Mutators
	/******************************************************************/

	public function getTaskID(){
		return $this->TaskID;
	}
	public function setTaskID($value){
		$this->TaskID = $value;
	}
	public function getTaskName(){
		return $this->TaskName;
	}
	public function setTaskName($value){
		$this->TaskName = $value;
	}
	public function getTaskDescription(){
		return $this->TaskDescription;
	}
	public function setTaskDescription($value){
		$this->TaskDescription = $value;
	}
	public function getProjectID(){
		return $this->ProjectID;
	}
	public function setProjectID($value){
		$this->ProjectID = $value;
	}
	public function getStatusTypeID(){
		return $this->StatusTypeID;
	}
	public function setStatusTypeID($value){
		$this->StatusTypeID = $value;
	}
	public function getStartDate(){
		return $this->StartDate;
	}
	public function setStartDate($value){
		$this->StartDate = $value;
	}
	public function getEndDate(){
		return $this->EndDate;
	}
	public function setEndDate($value){
		$this->EndDate = $value;
	}
	public function getUserID(){
		return $this->UserID;
	}
	public function setUserID($value){
		$this->UserID = $value;
	}


	/******************************************************************/
	// Public Methods
	/******************************************************************/


	public function load($paramId) {
		include(self::getDbSettings());
		$conn = new mysqli($servername, $username, $password, $dbname);
		$stmt = $conn->prepare('CALL usp_Tasks_Load(?)');
		$stmt->bind_param('i', $paramId);
		$stmt->execute();

		$result = $stmt->get_result();
		if (!$result) die($conn->error);

		while ($row = $result->fetch_assoc()) {
		 $this->setTaskID($row['TaskID']);
		 $this->setTaskName($row['TaskName']);
		 $this->setTaskDescription($row['TaskDescription']);
		 $this->setProjectID($row['ProjectID']);
		 $this->setStatusTypeID($row['StatusTypeID']);
		 $this->setStartDate($row['StartDate']);
		 $this->setEndDate($row['EndDate']);
		 $this->setUserID($row['UserID']);
		}
	}


	public function save() {
		if ($this->getTaskID() == 0)
			$this->insert();
		else
			$this->update();
	}

	/******************************************************************/
	// Private Methods
	/******************************************************************/



	private function insert() {
		include(self::getDbSettings());
		$conn = new mysqli($servername, $username, $password, $dbname);
		$stmt = $conn->prepare('CALL usp_Tasks_Add(?,?,?,?,?,?,?)');
		$arg1 = $this->getTaskName();
		$arg2 = $this->getTaskDescription();
		$arg3 = $this->getProjectID();
		$arg4 = $this->getStatusTypeID();
		$arg5 = $this->getStartDate();
		$arg6 = $this->getEndDate();
		$arg7 = $this->getUserID();
		$stmt->bind_param('ssiissi',$arg1,$arg2,$arg3,$arg4,$arg5,$arg6,$arg7);
		$stmt->execute();

		$result = $stmt->get_result();
		if (!$result) die($conn->error);
		while ($row = $result->fetch_assoc()) {
			// By default, the DALGen generated INSERT procedure returns the scope identity as id
			$this->load($row['id']);
		}
	}


	private function update() {
		include(self::getDbSettings());
		$conn = new mysqli($servername, $username, $password, $dbname);
		$stmt = $conn->prepare('CALL usp_Tasks_Update(?,?,?,?,?,?,?,?)');
		$arg1 = $this->getTaskID();
		$arg2 = $this->getTaskName();
		$arg3 = $this->getTaskDescription();
		$arg4 = $this->getProjectID();
		$arg5 = $this->getStatusTypeID();
		$arg6 = $this->getStartDate();
		$arg7 = $this->getEndDate();
		$arg8 = $this->getUserID();
		$stmt->bind_param('issiissi',$arg1,$arg2,$arg3,$arg4,$arg5,$arg6,$arg7,$arg8);
		$stmt->execute();
	}

	private static function setNullValue($value){
		if ($value == "")
			return null;
		else
			return $value;
	}

	/******************************************************************/
	// Static Methods
	/******************************************************************/



	public static function loadall() {
		include(self::getDbSettings());
		$conn = new mysqli($servername, $username, $password, $dbname);
		$stmt = $conn->prepare('CALL usp_Tasks_LoadAll()');
		$stmt->execute();

		$result = $stmt->get_result();
		if (!$result) die($conn->error);
		if ($result->num_rows > 0) {
			$arr = array();
			while ($row = $result->fetch_assoc()) {
				$tasks = new Tasks($row['TaskID'],$row['TaskName'],$row['TaskDescription'],$row['ProjectID'],$row['StatusTypeID'],$row['StartDate'],$row['EndDate'],$row['UserID']);
				$arr[] = $tasks;
			}
			return $arr;
		}
		else {
			die("The query yielded zero results.No rows found.");
		}
	}


	public static function remove($paramId) {
		include(self::getDbSettings());
		$conn = new mysqli($servername, $username, $password, $dbname);
		$stmt = $conn->prepare('CALL usp_Tasks_Remove(?)');
		$stmt->bind_param('i', $paramId);
		$stmt->execute();
	}


	public static function search($paramTaskID,$paramTaskName,$paramTaskDescription,$paramProjectID,$paramStatusTypeID,$paramStartDate,$paramEndDate,$paramUserID) {
		include(self::getDbSettings());
		$conn = new mysqli($servername, $username, $password, $dbname);
		$stmt = $conn->prepare('CALL usp_Tasks_Search(?,?,?,?,?,?,?,?)');
		$arg1 = Tasks::setNullValue($paramTaskID);
		$arg2 = Tasks::setNullValue($paramTaskName);
		$arg3 = Tasks::setNullValue($paramTaskDescription);
		$arg4 = Tasks::setNullValue($paramProjectID);
		$arg5 = Tasks::setNullValue($paramStatusTypeID);
		$arg6 = Tasks::setNullValue($paramStartDate);
		$arg7 = Tasks::setNullValue($paramEndDate);
		$arg8 = Tasks::setNullValue($paramUserID);
		$stmt->bind_param('issiissi',$arg1,$arg2,$arg3,$arg4,$arg5,$arg6,$arg7,$arg8);
		$stmt->execute();

		$result = $stmt->get_result();
		if (!$result) die($conn->error);
		if ($result->num_rows > 0) {
			$arr = array();
			while ($row = $result->fetch_assoc()) {
				$tasks = new Tasks($row['TaskID'],$row['TaskName'],$row['TaskDescription'],$row['ProjectID'],$row['StatusTypeID'],$row['StartDate'],$row['EndDate'],$row['UserID']);
				$arr[] = $tasks;
			}
			return $arr;
		}
		else {
			die("The query yielded zero results.No rows found.");
		}
	}

	public static function loadByAccountID($paramUserID) {
		include(self::getDbSettings());
		$conn = new mysqli($servername, $username, $password, $dbname);
		$stmt = $conn->prepare('CALL usp_Tasks_LoadbyUserID(?)');
		$stmt->bind_param('i', $paramUserID);
		$stmt->execute();

		$result = $stmt->get_result();
		if (!$result) die($conn->error);
		if ($result->num_rows > 0) {
			$arr = array();
			while ($row = $result->fetch_assoc()) {
				$tasks = new Tasks($row['TaskID'],$row['TaskName'],$row['TaskDescription'],$row['ProjectID'],$row['StatusTypeID'],$row['StartDate'],$row['EndDate'],$row['UserID']);
				$arr[] = $tasks;
			}
			return $arr;
		}
		else {
			die("The query yielded zero results.No rows found.");
		}
	}

}
