<?php
/*
Author:			This code was generated by DALGen version 1.1.0.0 available at https://github.com/H0r53/DALGen
Date:			11/22/2017
Description:	Creates the DAL class for  Notification table and respective stored procedures

*/



class Notification {

	// This is for local purposes only! In hosted environments the db_settings.php file should be outside of the webroot, such as: include("/outside-webroot/db_settings.php");
	protected static function getDbSettings() { return "DAL/db_localsettings.php"; }

	/******************************************************************/
	// Properties
	/******************************************************************/

	protected $NotificationID;
	protected $NotificationTypeID;
	protected $UserID;
	protected $ProjectID;
	protected $TaskID;


	/******************************************************************/
	// Constructors
	/******************************************************************/
	public function __construct() {
		$argv = func_get_args();
		switch( func_num_args() ) {
			case 0:
				self::__constructBase();
				break;
			case 1:
				self::__constructPK( $argv[0] );
				break;
			case 5:
				self::__constructFull( $argv[0], $argv[1], $argv[2], $argv[3], $argv[4] );
		}
	}


	public function __constructBase() {
		$this->NotificationID = 0;
		$this->NotificationTypeID = 0;
		$this->UserID = 0;
		$this->ProjectID = 0;
		$this->TaskID = 0;
	}


	public function __constructPK($paramId) {
		$this->load($paramId);
	}


	public function __constructFull($paramNotificationID,$paramNotificationTypeID,$paramUserID,$paramProjectID,$paramTaskID) {
		$this->NotificationID = $paramNotificationID;
		$this->NotificationTypeID = $paramNotificationTypeID;
		$this->UserID = $paramUserID;
		$this->ProjectID = $paramProjectID;
		$this->TaskID = $paramTaskID;
	}


	/******************************************************************/
	// Accessors / Mutators
	/******************************************************************/

	public function getNotificationID(){
		return $this->NotificationID;
	}
	public function setNotificationID($value){
		$this->NotificationID = $value;
	}
	public function getNotificationTypeID(){
		return $this->NotificationTypeID;
	}
	public function setNotificationTypeID($value){
		$this->NotificationTypeID = $value;
	}
	public function getUserID(){
		return $this->UserID;
	}
	public function setUserID($value){
		$this->UserID = $value;
	}
	public function getProjectID(){
		return $this->ProjectID;
	}
	public function setProjectID($value){
		$this->ProjectID = $value;
	}
	public function getTaskID(){
		return $this->TaskID;
	}
	public function setTaskID($value){
		$this->TaskID = $value;
	}


	/******************************************************************/
	// Public Methods
	/******************************************************************/


	public function load($paramId) {
		include(self::getDbSettings());
		$conn = new mysqli($servername, $username, $password, $dbname);
		$stmt = $conn->prepare('CALL usp_Notification_Load(?)');
		$stmt->bind_param('i', $paramId);
		$stmt->execute();

		$result = $stmt->get_result();
		if (!$result) die($conn->error);

		while ($row = $result->fetch_assoc()) {
		 $this->setNotificationID($row['NotificationID']);
		 $this->setNotificationTypeID($row['NotificationTypeID']);
		 $this->setUserID($row['UserID']);
		 $this->setProjectID($row['ProjectID']);
		 $this->setTaskID($row['TaskID']);
		}
	}


	public function save() {
		if ($this->getNotificationID() == 0)
			$this->insert();
		else
			$this->update();
	}

	/******************************************************************/
	// Private Methods
	/******************************************************************/



	private function insert() {
		include(self::getDbSettings());
		$conn = new mysqli($servername, $username, $password, $dbname);
		$stmt = $conn->prepare('CALL usp_Notification_Add(?,?,?,?)');
		$arg1 = $this->getNotificationTypeID();
		$arg2 = $this->getUserID();
		$arg3 = $this->getProjectID();
		$arg4 = $this->getTaskID();
		$stmt->bind_param('iiii',$arg1,$arg2,$arg3,$arg4);
		$stmt->execute();

		$result = $stmt->get_result();
		if (!$result) die($conn->error);
		while ($row = $result->fetch_assoc()) {
			// By default, the DALGen generated INSERT procedure returns the scope identity as id
			$this->load($row['id']);
		}
	}


	private function update() {
		include(self::getDbSettings());
		$conn = new mysqli($servername, $username, $password, $dbname);
		$stmt = $conn->prepare('CALL usp_Notification_Update(?,?,?,?,?)');
		$arg1 = $this->getNotificationID();
		$arg2 = $this->getNotificationTypeID();
		$arg3 = $this->getUserID();
		$arg4 = $this->getProjectID();
		$arg5 = $this->getTaskID();
		$stmt->bind_param('iiiii',$arg1,$arg2,$arg3,$arg4,$arg5);
		$stmt->execute();
	}

	private static function setNullValue($value){
		if ($value == "")
			return null;
		else
			return $value;
	}

	/******************************************************************/
	// Static Methods
	/******************************************************************/



	public static function loadall() {
		include(self::getDbSettings());
		$conn = new mysqli($servername, $username, $password, $dbname);
		$stmt = $conn->prepare('CALL usp_Notification_LoadAll()');
		$stmt->execute();

		$result = $stmt->get_result();
		if (!$result) die($conn->error);
		if ($result->num_rows > 0) {
			$arr = array();
			while ($row = $result->fetch_assoc()) {
				$notification = new Notification($row['NotificationID'],$row['NotificationTypeID'],$row['UserID'],$row['ProjectID'],$row['TaskID']);
				$arr[] = $notification;
			}
			return $arr;
		}
		else {
			die("The query yielded zero results.No rows found.");
		}
	}


	public static function remove($paramId) {
		include(self::getDbSettings());
		$conn = new mysqli($servername, $username, $password, $dbname);
		$stmt = $conn->prepare('CALL usp_Notification_Remove(?)');
		$stmt->bind_param('i', $paramId);
		$stmt->execute();
	}


	public static function search($paramNotificationID,$paramNotificationTypeID,$paramUserID,$paramProjectID,$paramTaskID) {
		include(self::getDbSettings());
		$conn = new mysqli($servername, $username, $password, $dbname);
		$stmt = $conn->prepare('CALL usp_Notification_Search(?,?,?,?,?)');
		$arg1 = Notification::setNullValue($paramNotificationID);
		$arg2 = Notification::setNullValue($paramNotificationTypeID);
		$arg3 = Notification::setNullValue($paramUserID);
		$arg4 = Notification::setNullValue($paramProjectID);
		$arg5 = Notification::setNullValue($paramTaskID);
		$stmt->bind_param('iiiii',$arg1,$arg2,$arg3,$arg4,$arg5);
		$stmt->execute();

		$result = $stmt->get_result();
		if (!$result) die($conn->error);
		if ($result->num_rows > 0) {
			$arr = array();
			while ($row = $result->fetch_assoc()) {
				$notification = new Notification($row['NotificationID'],$row['NotificationTypeID'],$row['UserID'],$row['ProjectID'],$row['TaskID']);
				$arr[] = $notification;
			}
			return $arr;
		}
		else {
			die("The query yielded zero results.No rows found.");
		}
	}
}
