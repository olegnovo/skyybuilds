/*
Author:			This code was generated by DALGen version 1.1.0.0 available at https://github.com/H0r53/DALGen
Date:			11/22/2017
Description:	Creates the Notification table and respective stored procedures

*/


USE DevData;



-- ------------------------------------------------------------
-- Drop existing objects
-- ------------------------------------------------------------

DROP TABLE IF EXISTS `DevData`.`Notification`;
DROP PROCEDURE IF EXISTS `DevData`.`usp_Notification_Load`;
DROP PROCEDURE IF EXISTS `DevData`.`usp_Notification_LoadAll`;
DROP PROCEDURE IF EXISTS `DevData`.`usp_Notification_Add`;
DROP PROCEDURE IF EXISTS `DevData`.`usp_Notification_Update`;
DROP PROCEDURE IF EXISTS `DevData`.`usp_Notification_Delete`;
DROP PROCEDURE IF EXISTS `DevData`.`usp_Notification_Search`;


-- ------------------------------------------------------------
-- Create table
-- ------------------------------------------------------------



CREATE TABLE `DevData`.`Notification` (
NotificationID INT AUTO_INCREMENT,
NotificationTypeID INT,
UserID INT,
ProjectID INT,
TaskID INT,
CONSTRAINT pk_Notification_NotificationID PRIMARY KEY (NotificationID),
CONSTRAINT fk_Notification_NotificationTypeID_N_NotificationTypesID FOREIGN KEY (NotificationTypeID) REFERENCES NotificationTypes (NotificationTypesID),
CONSTRAINT fk_Notification_UserID_Users_UserID FOREIGN KEY (UserID) REFERENCES Users (UserID),
CONSTRAINT fk_Notification_ProjectID_Projects_ProjectID FOREIGN KEY (ProjectID) REFERENCES Projects (ProjectID),
CONSTRAINT fk_Notification_TaskID_Tasks_TaskID FOREIGN KEY (TaskID) REFERENCES Tasks (TaskID)
);


-- ------------------------------------------------------------
-- Create default SCRUD sprocs for this table
-- ------------------------------------------------------------


DELIMITER //
CREATE PROCEDURE `DevData`.`usp_Notification_Load`
(
	 IN paramNotificationID INT
)
BEGIN
	SELECT
		`Notification`.`NotificationID` AS `NotificationID`,
		`Notification`.`NotificationTypeID` AS `NotificationTypeID`,
		`Notification`.`UserID` AS `UserID`,
		`Notification`.`ProjectID` AS `ProjectID`,
		`Notification`.`TaskID` AS `TaskID`
	FROM `Notification`
	WHERE 		`Notification`.`NotificationID` = paramNotificationID;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `DevData`.`usp_Notification_LoadAll`
()
BEGIN
	SELECT
		`Notification`.`NotificationID` AS `NotificationID`,
		`Notification`.`NotificationTypeID` AS `NotificationTypeID`,
		`Notification`.`UserID` AS `UserID`,
		`Notification`.`ProjectID` AS `ProjectID`,
		`Notification`.`TaskID` AS `TaskID`
	FROM `Notification`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `DevData`.`usp_Notification_Add`
(
	 IN paramNotificationTypeID INT,
	 IN paramUserID INT,
	 IN paramProjectID INT,
	 IN paramTaskID INT
)
BEGIN
	INSERT INTO `Notification` (NotificationTypeID,UserID,ProjectID,TaskID)
	VALUES (paramNotificationTypeID, paramUserID, paramProjectID, paramTaskID);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `DevData`.`usp_Notification_Update`
(
	IN paramNotificationID INT,
	IN paramNotificationTypeID INT,
	IN paramUserID INT,
	IN paramProjectID INT,
	IN paramTaskID INT
)
BEGIN
	UPDATE `Notification`
	SET NotificationTypeID = paramNotificationTypeID
		,UserID = paramUserID
		,ProjectID = paramProjectID
		,TaskID = paramTaskID
	WHERE		`Notification`.`NotificationID` = paramNotificationID;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `DevData`.`usp_Notification_Delete`
(
	IN paramNotificationID INT
)
BEGIN
	DELETE FROM `Notification`
	WHERE		`Notification`.`NotificationID` = paramNotificationID;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `DevData`.`usp_Notification_Search`
(
	IN paramNotificationID INT,
	IN paramNotificationTypeID INT,
	IN paramUserID INT,
	IN paramProjectID INT,
	IN paramTaskID INT
)
BEGIN
	SELECT
		`Notification`.`NotificationID` AS `NotificationID`,
		`Notification`.`NotificationTypeID` AS `NotificationTypeID`,
		`Notification`.`UserID` AS `UserID`,
		`Notification`.`ProjectID` AS `ProjectID`,
		`Notification`.`TaskID` AS `TaskID`
	FROM `Notification`
	WHERE
		COALESCE(Notification.`NotificationID`,0) = COALESCE(paramNotificationID,Notification.`NotificationID`,0)
		AND COALESCE(Notification.`NotificationTypeID`,0) = COALESCE(paramNotificationTypeID,Notification.`NotificationTypeID`,0)
		AND COALESCE(Notification.`UserID`,0) = COALESCE(paramUserID,Notification.`UserID`,0)
		AND COALESCE(Notification.`ProjectID`,0) = COALESCE(paramProjectID,Notification.`ProjectID`,0)
		AND COALESCE(Notification.`TaskID`,0) = COALESCE(paramTaskID,Notification.`TaskID`,0);
END //
DELIMITER ;
