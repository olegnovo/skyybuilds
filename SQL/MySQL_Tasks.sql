/*
Author:			This code was generated by DALGen version 1.0.0.0 available at https://github.com/H0r53/DALGen
Date:			11/12/2017
Description:	Creates the Tasks table and respective stored procedures

*/


USE DevData;



/*
-- Create table
*/

CREATE TABLE `DevData`.`Tasks` (
TaskID INT AUTO_INCREMENT,
TaskName VARCHAR(255),
TaskDescription VARCHAR(500),
ProjectID INT,
StatusTypeID INT,
StartDate VARCHAR(25),
EndDate VARCHAR(25),
UserID INT,
CONSTRAINT pk_Tasks_TaskID PRIMARY KEY (TaskID)
,
CONSTRAINT fk_Tasks_ProjectID_Projects_ProjectID FOREIGN KEY (ProjectID) REFERENCES Projects (ProjectID)
,
CONSTRAINT fk_Tasks_StatusTypeID_StatusTypes_StatusTypeID FOREIGN KEY (StatusTypeID) REFERENCES StatusTypes (StatusTypeID)
,
CONSTRAINT fk_Tasks_UserID_Users_UserID FOREIGN KEY (UserID) REFERENCES Users (UserID)
);


/*
-- Create default SCRUD sprocs for this table
*/


DELIMITER //
CREATE PROCEDURE `DevData`.`usp_Tasks_Load`
(
	 IN paramTaskID INT
)
BEGIN
	SELECT
		`Tasks`.`TaskID` AS `TaskID`,
		`Tasks`.`TaskName` AS `TaskName`,
		`Tasks`.`TaskDescription` AS `TaskDescription`,
		`Tasks`.`ProjectID` AS `ProjectID`,
		`Tasks`.`StatusTypeID` AS `StatusTypeID`,
		`Tasks`.`StartDate` AS `StartDate`,
		`Tasks`.`EndDate` AS `EndDate`,
		`Tasks`.`UserID` AS `UserID`
	FROM `Tasks`
	WHERE 		`Tasks`.`TaskID` = paramTaskID;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `DevData`.`usp_Tasks_LoadAll`()
BEGIN
	SELECT
		`Tasks`.`TaskID` AS `TaskID`,
		`Tasks`.`TaskName` AS `TaskName`,
		`Tasks`.`TaskDescription` AS `TaskDescription`,
		`Tasks`.`ProjectID` AS `ProjectID`,
		`Tasks`.`StatusTypeID` AS `StatusTypeID`,
		`Tasks`.`StartDate` AS `StartDate`,
		`Tasks`.`EndDate` AS `EndDate`,
		`Tasks`.`UserID` AS `UserID`
	FROM `Tasks`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `DevData`.`usp_Tasks_Add`
(
	 IN paramTaskName VARCHAR(255),
	 IN paramTaskDescription VARCHAR(500),
	 IN paramProjectID INT,
	 IN paramStatusTypeID INT,
	 IN paramStartDate VARCHAR(25),
	 IN paramEndDate VARCHAR(25),
	 IN paramUserID INT
)
BEGIN
	INSERT INTO `Tasks` (TaskName,TaskDescription,ProjectID,StatusTypeID,StartDate,EndDate,UserID)
	VALUES (paramTaskName, paramTaskDescription, paramProjectID, paramStatusTypeID, paramStartDate, paramEndDate, paramUserID);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `DevData`.`usp_Tasks_Update`
(
	IN paramTaskID INT,
	IN paramTaskName VARCHAR(255),
	IN paramTaskDescription VARCHAR(500),
	IN paramProjectID INT,
	IN paramStatusTypeID INT,
	IN paramStartDate VARCHAR(25),
	IN paramEndDate VARCHAR(25),
	IN paramUserID INT
)
BEGIN
	UPDATE `Tasks`
	SET TaskName = paramTaskName
		,TaskDescription = paramTaskDescription
		,ProjectID = paramProjectID
		,StatusTypeID = paramStatusTypeID
		,StartDate = paramStartDate
		,EndDate = paramEndDate
		,UserID = paramUserID
	WHERE		`Tasks`.`TaskID` = paramTaskID;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `DevData`.`usp_Tasks_Delete`
(
	IN paramTaskID INT
)
BEGIN
	DELETE FROM `Tasks`
	WHERE		`Tasks`.`TaskID` = paramTaskID;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `DevData`.`usp_Tasks_Search`
(
	IN paramTaskID INT,
	IN paramTaskName VARCHAR(255),
	IN paramTaskDescription VARCHAR(500),
	IN paramProjectID INT,
	IN paramStatusTypeID INT,
	IN paramStartDate VARCHAR(25),
	IN paramEndDate VARCHAR(25),
	IN paramUserID INT
)
BEGIN
	SELECT
		`Tasks`.`TaskID` AS `TaskID`,
		`Tasks`.`TaskName` AS `TaskName`,
		`Tasks`.`TaskDescription` AS `TaskDescription`,
		`Tasks`.`ProjectID` AS `ProjectID`,
		`Tasks`.`StatusTypeID` AS `StatusTypeID`,
		`Tasks`.`StartDate` AS `StartDate`,
		`Tasks`.`EndDate` AS `EndDate`,
		`Tasks`.`UserID` AS `UserID`
	FROM `Tasks`
	WHERE
		COALESCE(Tasks.`TaskID`,0) = COALESCE(paramTaskID,Tasks.`TaskID`,0)
		AND COALESCE(Tasks.`TaskName`,'') = COALESCE(paramTaskName,Tasks.`TaskName`,'')
		AND COALESCE(Tasks.`TaskDescription`,'') = COALESCE(paramTaskDescription,Tasks.`TaskDescription`,'')
		AND COALESCE(Tasks.`ProjectID`,0) = COALESCE(paramProjectID,Tasks.`ProjectID`,0)
		AND COALESCE(Tasks.`StatusTypeID`,0) = COALESCE(paramStatusTypeID,Tasks.`StatusTypeID`,0)
		AND COALESCE(Tasks.`StartDate`,'') = COALESCE(paramStartDate,Tasks.`StartDate`,'')
		AND COALESCE(Tasks.`EndDate`,'') = COALESCE(paramEndDate,Tasks.`EndDate`,'')
		AND COALESCE(Tasks.`UserID`,0) = COALESCE(paramUserID,Tasks.`UserID`,0);
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `DevData`.`usp_Tasks_LoadbyUserID`
(
	 IN paramUserID INT
)
BEGIN
	SELECT
		`Tasks`.`TaskID` AS `TaskID`,
		`Tasks`.`TaskName` AS `TaskName`,
		`Tasks`.`TaskDescription` AS `TaskDescription`,
		`Tasks`.`ProjectID` AS `ProjectID`,
		`Tasks`.`StatusTypeID` AS `StatusTypeID`,
		`Tasks`.`StartDate` AS `StartDate`,
		`Tasks`.`EndDate` AS `EndDate`,
		`Tasks`.`UserID` AS `UserID`
	FROM `Tasks`
	WHERE 		`Tasks`.`UserID` = paramUserID;
END //
DELIMITER ;
